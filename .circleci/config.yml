version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.7.4
        environment:
          FLASK_CONFIG: debug
#          TEST_DATABASE_URL: postgresql://ubuntu@localhost/circle_test?sslmode=disable
#      - image: circleci/postgres:9.6.5-alpine-ram
#        environment:
#          POSTGRES_USER: ubuntu
#          POSTGRES_DB: circle_test
#          POSTGRES_PASSWORD: ''
    steps:
      - checkout
      - run: mkdir test-reports
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - 'venv'
      - run:
          command: |
            . venv/bin/activate
            python -m unittest discover
#      - store_artifacts:
#          path: test-reports/
#          destination: tr1
#      - store_test_results:
#          path: test-reports/
      - run:
          command: |
            . venv/bin/activate
            coverage run -m unittest discover
            codecov

  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - run:
          name: 'Install Heroku CLI, if necessary'
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: heroku maintenance on
          command: heroku maintenance:on --app ${HEROKU_APP_NAME}
      - run:
          name: Deploy to Heroku_Production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master
      - run:
          name: Intialize App
          command: |
            heroku run -a $HEROKU_APP_NAME python manage.py init_app
            heroku run -a $HEROKU_APP_NAME python manage.py create_dummy_data
            heroku restart -a $HEROKU_APP_NAME
      - run:
          name: heroku maintenance off
          command: heroku maintenance:off --app ${HEROKU_APP_NAME}

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master